{"version":3,"sources":["components/login/login.component.jsx","Router.js","App.js","serviceWorker.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["Login","Fragment","id","Component","customHistory","createBrowserHistory","Router","basename","history","exact","path","component","App","useSelector","state","counter","useDispatch","className","Boolean","window","location","hostname","match","counterReducer","action","type","loggedReducer","allReducers","combineReducers","isLogged","store","createStore","allReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kUAgBeA,G,6KAVX,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,GAAG,kBACN,mF,GALUC,c,OCEdC,EAAgBC,cAmBPC,E,uKAdP,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYC,SAAS,KACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,QAASJ,EAAeK,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACzD,kBAAC,IAAD,CAAOQ,QAASJ,EAAeK,OAAK,EAACC,KAAK,SAASC,UAAWX,W,GARjEG,aCgBNS,MAlBf,WAIE,OAHgBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,WAC1BC,cAGf,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCPSC,EAXQ,WAAwB,IAAvBT,EAAsB,uDAAd,EAAGU,EAAW,uCAC1C,OAAOA,EAAOC,MACV,IAAK,YACD,OAAOX,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,QACI,OAAOA,ICEJY,EATO,WAA4B,IAA3BZ,EAA0B,wDAAXU,EAAW,uCAC7C,OAAQA,EAAOC,MACX,IAAK,UACD,OAAQX,EACZ,QACI,OAAOA,ICIJa,EALKC,YAAgB,CAChCb,QAAUQ,EACVM,SAAWH,ICGTI,EAAQC,YACZC,EACAb,OAAOc,8BAAgCd,OAAOc,gCAGhDC,IAASC,OAEP,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEJM,SAASC,eAAe,SJgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27efa0e1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport \"./login.style.sass\";\n\nclass Login extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"loginComponent\">\n          <h1>¡Hola! Ingresá tu e‑mail o usuario</h1>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect, HashRouter } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport Login from './components/login/login.component.jsx';\nimport { createBrowserHistory } from 'history';\n\nconst customHistory = createBrowserHistory();\n\nclass Router extends Component {\n\n    render() {\n        return (\n            <BrowserRouter>\n                <HashRouter basename=\"/\">\n                    <Switch>\n                        <Route history={customHistory} exact path=\"/\" component={Login} />\n                        <Route history={customHistory} exact path=\"/login\" component={Login} />\n                    </Switch>\n                </HashRouter>\n            </BrowserRouter>\n\n        );\n    }\n}\n\nexport default Router;","import React from 'react';\nimport './assets/App.css';\nimport { useSelector, useDispatch } from 'react-redux'\nimport {increment} from './actions';\nimport Router from './Router';\n\nfunction App() {\n  const counter = useSelector(state => state.counter)\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <Router></Router>\n      {/*\n        <button onClick={() => dispatch(increment())}>+</button>\n      <h1>Counter: {counter}</h1>\n      */\n      }\n      \n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const counterReducer = (state = 0, action) => {\n    switch(action.type){\n        case 'INCREMENT':\n            return state + 1\n        case 'DECREMENT':\n            return state - 1\n        default:\n            return state;\n    }\n}\n\nexport default counterReducer;","const loggedReducer = (state = false, action) => {\n    switch( action.type) {\n        case 'SIGN_IN':\n            return !state\n        default:\n            return state\n    }\n};\n\nexport default loggedReducer;","import counterReducer from './counter';\nimport loggedReducer from './isLogged';\nimport {combineReducers} from 'redux';\n\nconst allReducers = combineReducers({\n    counter : counterReducer,\n    isLogged : loggedReducer\n})\n\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, } from 'redux';\nimport allReducer from './reducers';\nimport { Provider } from \"react-redux\"\n\nconst store = createStore(\n  allReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}